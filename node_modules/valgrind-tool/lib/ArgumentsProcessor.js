"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
exports.__esModule = true;
var path = __importStar(require("path"));
var fs_1 = require("fs");
var ArgumentsProcessor = /** @class */ (function () {
    function ArgumentsProcessor(argv) {
        this.argv = argv;
    }
    ArgumentsProcessor.prototype.getOptions = function () {
        var argv = this.argv;
        var output;
        var commentOnly = false;
        var files = new Array();
        for (var i = 0; i < argv.length; i++) {
            // support --arg="x", --arg=x and --arg='x'
            if (argv[i][0] === '-' && argv[i].indexOf('=') > -1) {
                var slices = argv[i].split('=');
                if (slices[1][0] === '"' || slices[1][0] === "'")
                    slices[1] = slices[1].substring(1, slices[1].length - 1);
                argv.splice.apply(argv, __spreadArrays([i, 1], slices));
                i--;
                continue;
            }
            switch (argv[i]) {
                case '-h':
                case '--help':
                    this.printHelp();
                    return undefined;
                case '--license':
                    fs_1.createReadStream(path.resolve(__dirname, '../LICENSE')).pipe(process.stdout);
                    return undefined;
                case '-o':
                case '--output':
                    output = argv[++i];
                    break;
                case '--comment':
                    commentOnly = true;
                    break;
                default:
                    if (argv[i][0] == '-' || argv[i].substring(0, 2) == '--') {
                        process.stderr.write('valgrind-tool FAILED:\n');
                        process.stderr.write("Invalid option " + argv[i] + ". Try valgrind-tool -h\n");
                        return undefined;
                    }
                    files.push(argv[i]);
            }
        }
        return {
            files: files,
            commentOnly: commentOnly,
            output: output
        };
    };
    ArgumentsProcessor.prototype.printHelp = function () {
        fs_1.createReadStream(path.resolve(__dirname, '../HELP')).pipe(process.stdout);
    };
    return ArgumentsProcessor;
}());
exports["default"] = ArgumentsProcessor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXJndW1lbnRzUHJvY2Vzc29yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0FyZ3VtZW50c1Byb2Nlc3Nvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEseUNBQTZCO0FBRTdCLHlCQUFzQztBQUV0QztJQUNJLDRCQUFvQixJQUFjO1FBQWQsU0FBSSxHQUFKLElBQUksQ0FBVTtJQUNsQyxDQUFDO0lBQ00sdUNBQVUsR0FBakI7UUFFUSxJQUFBLGdCQUFJLENBQ0M7UUFFVCxJQUFJLE1BQTBCLENBQUM7UUFDL0IsSUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLElBQU0sS0FBSyxHQUFHLElBQUksS0FBSyxFQUFVLENBQUM7UUFFbEMsS0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDakMsMkNBQTJDO1lBQzNDLElBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO2dCQUNoRCxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUVsQyxJQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUc7b0JBQzNDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUU3RCxJQUFJLENBQUMsTUFBTSxPQUFYLElBQUksa0JBQVEsQ0FBQyxFQUFFLENBQUMsR0FBSyxNQUFNLEdBQUU7Z0JBQzdCLENBQUMsRUFBRSxDQUFDO2dCQUNKLFNBQVM7YUFDWjtZQUNELFFBQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNaLEtBQUssSUFBSSxDQUFDO2dCQUNWLEtBQUssUUFBUTtvQkFDVCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7b0JBQ2pCLE9BQU8sU0FBUyxDQUFDO2dCQUNyQixLQUFLLFdBQVc7b0JBQ1oscUJBQWdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUM3RSxPQUFPLFNBQVMsQ0FBQztnQkFDckIsS0FBSyxJQUFJLENBQUM7Z0JBQ1YsS0FBSyxVQUFVO29CQUNYLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDbkIsTUFBTTtnQkFDVixLQUFLLFdBQVc7b0JBQ1osV0FBVyxHQUFHLElBQUksQ0FBQztvQkFDbkIsTUFBTTtnQkFDVjtvQkFDSSxJQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFO3dCQUNyRCxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO3dCQUNoRCxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxvQkFBa0IsSUFBSSxDQUFDLENBQUMsQ0FBQyw2QkFBMEIsQ0FBQyxDQUFDO3dCQUMxRSxPQUFPLFNBQVMsQ0FBQztxQkFDcEI7b0JBQ0QsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMzQjtTQUNKO1FBQ0QsT0FBTztZQUNILEtBQUssT0FBQTtZQUNMLFdBQVcsYUFBQTtZQUNYLE1BQU0sUUFBQTtTQUNULENBQUM7SUFDTixDQUFDO0lBQ08sc0NBQVMsR0FBakI7UUFDSSxxQkFBZ0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUNMLHlCQUFDO0FBQUQsQ0FBQyxBQXpERCxJQXlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBJVmFsZ3JpbmRPcHRpb25zIH0gZnJvbSBcIi4vVmFsZ3JpbmRMb2dQYXJzZXJcIjtcbmltcG9ydCB7IGNyZWF0ZVJlYWRTdHJlYW0gfSBmcm9tIFwiZnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXJndW1lbnRzUHJvY2Vzc29yIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFyZ3Y6IHN0cmluZ1tdKSB7XG4gICAgfVxuICAgIHB1YmxpYyBnZXRPcHRpb25zKCk6IElWYWxncmluZE9wdGlvbnMgfCB1bmRlZmluZWQge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBhcmd2XG4gICAgICAgIH0gPSB0aGlzO1xuXG4gICAgICAgIGxldCBvdXRwdXQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IGNvbW1lbnRPbmx5ID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGZpbGVzID0gbmV3IEFycmF5PHN0cmluZz4oKTtcblxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgYXJndi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8gc3VwcG9ydCAtLWFyZz1cInhcIiwgLS1hcmc9eCBhbmQgLS1hcmc9J3gnXG4gICAgICAgICAgICBpZihhcmd2W2ldWzBdID09PSAnLScgJiYgYXJndltpXS5pbmRleE9mKCc9JykgPiAtMSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNsaWNlcyA9IGFyZ3ZbaV0uc3BsaXQoJz0nKTtcblxuICAgICAgICAgICAgICAgIGlmKHNsaWNlc1sxXVswXSA9PT0gJ1wiJyB8fCBzbGljZXNbMV1bMF0gPT09IFwiJ1wiKVxuICAgICAgICAgICAgICAgICAgICBzbGljZXNbMV0gPSBzbGljZXNbMV0uc3Vic3RyaW5nKDEsIHNsaWNlc1sxXS5sZW5ndGggLSAxKTtcblxuICAgICAgICAgICAgICAgIGFyZ3Yuc3BsaWNlKGksIDEsIC4uLnNsaWNlcyk7XG4gICAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dpdGNoKGFyZ3ZbaV0pIHtcbiAgICAgICAgICAgICAgICBjYXNlICctaCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnLS1oZWxwJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmludEhlbHAoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBjYXNlICctLWxpY2Vuc2UnOlxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVSZWFkU3RyZWFtKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLi9MSUNFTlNFJykpLnBpcGUocHJvY2Vzcy5zdGRvdXQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGNhc2UgJy1vJzpcbiAgICAgICAgICAgICAgICBjYXNlICctLW91dHB1dCc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9IGFyZ3ZbKytpXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnLS1jb21tZW50JzpcbiAgICAgICAgICAgICAgICAgICAgY29tbWVudE9ubHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZihhcmd2W2ldWzBdID09ICctJyB8fCBhcmd2W2ldLnN1YnN0cmluZygwLCAyKSA9PSAnLS0nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLnN0ZGVyci53cml0ZSgndmFsZ3JpbmQtdG9vbCBGQUlMRUQ6XFxuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLnN0ZGVyci53cml0ZShgSW52YWxpZCBvcHRpb24gJHthcmd2W2ldfS4gVHJ5IHZhbGdyaW5kLXRvb2wgLWhcXG5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmlsZXMucHVzaChhcmd2W2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmlsZXMsXG4gICAgICAgICAgICBjb21tZW50T25seSxcbiAgICAgICAgICAgIG91dHB1dFxuICAgICAgICB9O1xuICAgIH1cbiAgICBwcml2YXRlIHByaW50SGVscCgpIHtcbiAgICAgICAgY3JlYXRlUmVhZFN0cmVhbShwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4vSEVMUCcpKS5waXBlKHByb2Nlc3Muc3Rkb3V0KTtcbiAgICB9XG59Il19