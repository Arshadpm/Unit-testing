"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
exports.__esModule = true;
var defaultFs = __importStar(require("fs"));
var Character = /** @class */ (function () {
    function Character() {
    }
    Character.isEndOfSuppressionLine = function (ch) {
        if (Character.isLineBreak(ch) || ch === 125) {
            return true;
        }
        return false;
    };
    Character.isLineBreak = function (ch) {
        if (ch === 10) {
            return true;
        }
        return false;
    };
    return Character;
}());
exports.Character = Character;
var ValgrindLogParser = /** @class */ (function () {
    function ValgrindLogParser(options) {
        this.options = options;
        this.suppressionsCount = 0;
        this.bytesWritten = 0;
        this.lineCount = 0;
        /**
         * 4 spaces
         */
        this.indentationBuffer = Buffer.from([32, 32, 32, 32]);
        this.buffer = Buffer.allocUnsafe(ValgrindLogParser.BufferReadingOffsetMax);
        this.eof = false;
        /**
         * How much did we read from current buffer?
         */
        this.bufferReadingOffset = ValgrindLogParser.BufferReadingOffsetMax;
        this.bufferReadingOffsetMax = ValgrindLogParser.BufferReadingOffsetMax;
        this.characterCache = new Map();
    }
    ValgrindLogParser.prototype.parse = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ch;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.options.includeHeader) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.writeOutput("# " + new Date().toString() + "\n")];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.writeOutput('# Generated automatically with valgrind-tool: https://github.com/VictorQueiroz/valgrind-tool\n\n')];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [4 /*yield*/, this.peekCharacter()];
                    case 4:
                        ch = _a.sent();
                        if (typeof ch === 'undefined' || ch === 0) {
                            return [2 /*return*/];
                        }
                        if (!(ch === 32 || ch === 10)) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.readCharacter()];
                    case 5:
                        _a.sent();
                        return [3 /*break*/, 10];
                    case 6:
                        if (!(ch === 123)) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.readSuppression()];
                    case 7:
                        _a.sent();
                        return [3 /*break*/, 10];
                    case 8: return [4 /*yield*/, this.readValgrindLog()];
                    case 9:
                        _a.sent();
                        _a.label = 10;
                    case 10:
                        if (typeof ch !== 'undefined') return [3 /*break*/, 3];
                        _a.label = 11;
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    ValgrindLogParser.prototype.writeOutput = function (value) {
        var _this = this;
        if (typeof value === 'number') {
            var cached = this.characterCache.get(value);
            if (cached) {
                value = cached;
            }
            else {
                var n = String.fromCharCode(value);
                this.characterCache.set(value, n);
                value = n;
            }
        }
        if (typeof value === 'string') {
            value = Buffer.from(value, 'utf8');
        }
        return new Promise(function (resolve, reject) {
            defaultFs.write(_this.options.output, value, function (err, bytesWritten) {
                if (err) {
                    reject(err);
                }
                else {
                    _this.bytesWritten += bytesWritten;
                    resolve({
                        bytesWritten: bytesWritten
                    });
                }
            });
        });
    };
    ValgrindLogParser.prototype.readSuppression = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ch;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.expect(123)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.writeOutput('{\n')];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [4 /*yield*/, this.readSuppressionLine()];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, this.peekCharacter()];
                    case 5:
                        ch = _a.sent();
                        _a.label = 6;
                    case 6:
                        if (typeof ch !== 'undefined' && ch !== 125) return [3 /*break*/, 3];
                        _a.label = 7;
                    case 7: return [4 /*yield*/, this.expect(125)];
                    case 8:
                        _a.sent();
                        return [4 /*yield*/, this.writeOutput('}\n')];
                    case 9:
                        _a.sent();
                        this.suppressionsCount++;
                        return [2 /*return*/];
                }
            });
        });
    };
    ValgrindLogParser.prototype.readSuppressionLine = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ch, startReadingLine;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        startReadingLine = false;
                        _a.label = 1;
                    case 1: return [4 /*yield*/, this.peekCharacter()];
                    case 2:
                        ch = _a.sent();
                        if (typeof ch === 'undefined') {
                            return [2 /*return*/];
                        }
                        if (!(!startReadingLine && (ch === 10 || ch === 32))) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.readCharacter()];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 9];
                    case 4:
                        if (!(ch !== 125)) return [3 /*break*/, 9];
                        if (!!startReadingLine) return [3 /*break*/, 6];
                        startReadingLine = true;
                        return [4 /*yield*/, this.writeOutput(this.indentationBuffer)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [4 /*yield*/, this.writeOutput(ch)];
                    case 7:
                        _a.sent();
                        return [4 /*yield*/, this.readCharacter()];
                    case 8:
                        _a.sent();
                        _a.label = 9;
                    case 9:
                        if (!Character.isEndOfSuppressionLine(ch)) return [3 /*break*/, 1];
                        _a.label = 10;
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    ValgrindLogParser.prototype.readValgrindLog = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ch, writtingLog;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        writtingLog = false;
                        _a.label = 1;
                    case 1: return [4 /*yield*/, this.readCharacter()];
                    case 2:
                        ch = _a.sent();
                        if (typeof ch === 'undefined') {
                            return [3 /*break*/, 8];
                        }
                        if (!this.options.commentOnly) return [3 /*break*/, 7];
                        if (!!writtingLog) return [3 /*break*/, 5];
                        if (!(ch !== 35)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.writeOutput('#')];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        writtingLog = true;
                        _a.label = 5;
                    case 5: return [4 /*yield*/, this.writeOutput(ch)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7:
                        if (ch !== 10) return [3 /*break*/, 1];
                        _a.label = 8;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    ValgrindLogParser.prototype.preload = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.eof) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.read()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        if (this.bufferReadingOffset === this.bufferReadingOffsetMax) {
                            return [2 /*return*/, false];
                        }
                        _a.label = 3;
                    case 3: return [2 /*return*/, true];
                }
            });
        });
    };
    ValgrindLogParser.prototype.expect = function (n) {
        return __awaiter(this, void 0, void 0, function () {
            var ch;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readCharacter()];
                    case 1:
                        ch = _a.sent();
                        if (ch !== n || typeof ch === 'undefined') {
                            throw new Error("Expected \"" + String.fromCharCode(n) + "\" but got \"" + (typeof ch === 'undefined' ? 'undefined' : String.fromCharCode(ch)) + "\" instead");
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ValgrindLogParser.prototype.peekCharacter = function () {
        return __awaiter(this, void 0, void 0, function () {
            var loaded;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.preload()];
                    case 1:
                        loaded = _a.sent();
                        if (!loaded) {
                            return [2 /*return*/, undefined];
                        }
                        return [2 /*return*/, this.buffer[this.bufferReadingOffset]];
                }
            });
        });
    };
    ValgrindLogParser.prototype.readCharacter = function () {
        return __awaiter(this, void 0, void 0, function () {
            var loaded, ch;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.preload()];
                    case 1:
                        loaded = _a.sent();
                        if (!loaded) {
                            return [2 /*return*/, undefined];
                        }
                        ch = this.buffer[this.bufferReadingOffset++];
                        if (ch === 10) {
                            this.onAdvanceLineNumber();
                        }
                        return [2 /*return*/, ch];
                }
            });
        });
    };
    ValgrindLogParser.prototype.onAdvanceLineNumber = function () {
        this.lineCount++;
        if (this.options.eventEmitter) {
            this.options.eventEmitter({
                type: 'readline',
                suppressionCount: this.suppressionsCount,
                bytesWritten: this.bytesWritten,
                lineNumber: this.lineCount
            });
        }
    };
    /**
     * Read more from file handle as we need
     */
    ValgrindLogParser.prototype.read = function () {
        return __awaiter(this, void 0, void 0, function () {
            var bytesRead;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.eof || this.bufferReadingOffset < this.bufferReadingOffsetMax) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.readInput()];
                    case 1:
                        bytesRead = (_a.sent()).bytesRead;
                        if (bytesRead < this.buffer.byteLength) {
                            this.eof = true;
                        }
                        this.bufferReadingOffsetMax = bytesRead;
                        this.bufferReadingOffset = 0;
                        return [2 /*return*/];
                }
            });
        });
    };
    ValgrindLogParser.prototype.readInput = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            defaultFs.read(_this.options.input, _this.buffer, 0, _this.buffer.byteLength, null, function (err, bytesRead) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve({
                        bytesRead: bytesRead
                    });
                }
            });
        });
    };
    ValgrindLogParser.BufferReadingOffsetMax = Math.pow(16, 4);
    return ValgrindLogParser;
}());
exports["default"] = ValgrindLogParser;
//# sourceMappingURL=data:application/json;base64,