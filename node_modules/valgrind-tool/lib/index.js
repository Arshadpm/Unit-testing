"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var fs_1 = require("fs");
var path = __importStar(require("path"));
var ValgrindLogParser_1 = __importDefault(require("./ValgrindLogParser"));
var ArgumentsProcessor_1 = __importDefault(require("./ArgumentsProcessor"));
var STDOUT_FILE_DESCRIPTOR = 1;
var STDIN_FILE_DESCRIPTOR = 0;
function run(argv) {
    return __awaiter(this, void 0, void 0, function () {
        function printHeader(fd) {
            if (output !== STDOUT_FILE_DESCRIPTOR) {
                process.stdout.write("Processing " + files[fd] + ":\n");
            }
        }
        var options, output, fd, fds, files, _i, _a, file, fullPath, fd, startTime, _loop_1, _b, fds_1, fd;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    options = new ArgumentsProcessor_1["default"](argv).getOptions();
                    if (!options) {
                        return [2 /*return*/];
                    }
                    if (!!options.output) return [3 /*break*/, 1];
                    output = STDOUT_FILE_DESCRIPTOR;
                    return [3 /*break*/, 3];
                case 1: return [4 /*yield*/, fs_1.promises.open(path.resolve(process.cwd(), options.output), fs_1.constants.W_OK | fs_1.constants.O_CREAT)];
                case 2:
                    fd = (_c.sent()).fd;
                    output = fd;
                    _c.label = 3;
                case 3:
                    fds = new Array();
                    files = new Array();
                    if (!!options.files.length) return [3 /*break*/, 4];
                    fds.push(STDIN_FILE_DESCRIPTOR);
                    return [3 /*break*/, 8];
                case 4:
                    _i = 0, _a = options.files;
                    _c.label = 5;
                case 5:
                    if (!(_i < _a.length)) return [3 /*break*/, 8];
                    file = _a[_i];
                    fullPath = path.resolve(process.cwd(), file);
                    return [4 /*yield*/, fs_1.promises.open(fullPath, fs_1.constants.R_OK)];
                case 6:
                    fd = (_c.sent()).fd;
                    fds.push(fd);
                    files[fd] = fullPath;
                    _c.label = 7;
                case 7:
                    _i++;
                    return [3 /*break*/, 5];
                case 8:
                    startTime = Date.now();
                    _loop_1 = function (fd) {
                        var parser;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    printHeader(fd);
                                    parser = new ValgrindLogParser_1["default"]({
                                        input: fd,
                                        includeHeader: true,
                                        output: output,
                                        commentOnly: options.commentOnly,
                                        eventEmitter: output !== STDOUT_FILE_DESCRIPTOR ? function (event) {
                                            switch (event.type) {
                                                case 'readline':
                                                    process.stdout.cursorTo(0, 0);
                                                    process.stdout.clearLine(0);
                                                    process.stdout.clearScreenDown();
                                                    printHeader(fd);
                                                    process.stdout.cursorTo(0, 1);
                                                    process.stdout.clearLine(0);
                                                    process.stdout.write("Line number " + event.lineNumber + "... (" + event.bytesWritten + " bytes written, " + event.suppressionCount + " suppressions)\n");
                                            }
                                        } : undefined
                                    });
                                    return [4 /*yield*/, parser.parse()];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    };
                    _b = 0, fds_1 = fds;
                    _c.label = 9;
                case 9:
                    if (!(_b < fds_1.length)) return [3 /*break*/, 12];
                    fd = fds_1[_b];
                    return [5 /*yield**/, _loop_1(fd)];
                case 10:
                    _c.sent();
                    _c.label = 11;
                case 11:
                    _b++;
                    return [3 /*break*/, 9];
                case 12:
                    if (output !== STDOUT_FILE_DESCRIPTOR) {
                        process.stdout.write("Done in " + (Date.now() - startTime) + "ms!\n\n");
                    }
                    return [2 /*return*/];
            }
        });
    });
}
run(process.argv.slice(2))["catch"](function (reason) {
    console.error(reason);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEseUJBQThEO0FBQzlELHlDQUE2QjtBQUM3QiwwRUFBb0Q7QUFDcEQsNEVBQXNEO0FBRXRELElBQU0sc0JBQXNCLEdBQUcsQ0FBQyxDQUFDO0FBQ2pDLElBQU0scUJBQXFCLEdBQUcsQ0FBQyxDQUFDO0FBRWhDLFNBQWUsR0FBRyxDQUFDLElBQWM7O1FBd0I3QixTQUFTLFdBQVcsQ0FBQyxFQUFVO1lBQzNCLElBQUcsTUFBTSxLQUFLLHNCQUFzQixFQUFFO2dCQUNsQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxnQkFBYyxLQUFLLENBQUMsRUFBRSxDQUFDLFFBQUssQ0FBQyxDQUFDO2FBQ3REO1FBQ0wsQ0FBQzs7Ozs7b0JBM0JLLE9BQU8sR0FBRyxJQUFJLCtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO29CQUMxRCxJQUFHLENBQUMsT0FBTyxFQUFFO3dCQUNULHNCQUFPO3FCQUNWO3lCQUVFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBZix3QkFBZTtvQkFDZCxNQUFNLEdBQUcsc0JBQXNCLENBQUM7O3dCQUVuQixxQkFBTSxhQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxjQUFXLENBQUMsSUFBSSxHQUFHLGNBQVcsQ0FBQyxPQUFPLENBQUMsRUFBQTs7b0JBQXhHLEVBQUUsR0FBSSxDQUFBLFNBQWtHLENBQUEsR0FBdEc7b0JBQ1QsTUFBTSxHQUFHLEVBQUUsQ0FBQzs7O29CQUVWLEdBQUcsR0FBRyxJQUFJLEtBQUssRUFBVSxDQUFDO29CQUMxQixLQUFLLEdBQUcsSUFBSSxLQUFLLEVBQVUsQ0FBQzt5QkFDL0IsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBckIsd0JBQXFCO29CQUNwQixHQUFHLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7OzswQkFFRCxFQUFiLEtBQUEsT0FBTyxDQUFDLEtBQUs7Ozt5QkFBYixDQUFBLGNBQWEsQ0FBQTtvQkFBckIsSUFBSTtvQkFDSixRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7b0JBQ3RDLHFCQUFNLGFBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLGNBQVcsQ0FBQyxJQUFJLENBQUMsRUFBQTs7b0JBQS9DLEVBQUUsR0FBSSxDQUFBLFNBQXlDLENBQUEsR0FBN0M7b0JBQ1QsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDYixLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDOzs7b0JBSlAsSUFBYSxDQUFBOzs7b0JBWTdCLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7d0NBQ25CLEVBQUU7Ozs7O29DQUNSLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztvQ0FDVixNQUFNLEdBQUcsSUFBSSw4QkFBaUIsQ0FBQzt3Q0FDakMsS0FBSyxFQUFFLEVBQUU7d0NBQ1QsYUFBYSxFQUFFLElBQUk7d0NBQ25CLE1BQU0sUUFBQTt3Q0FDTixXQUFXLEVBQUUsT0FBTyxDQUFDLFdBQVc7d0NBQ2hDLFlBQVksRUFBRSxNQUFNLEtBQUssc0JBQXNCLENBQUMsQ0FBQyxDQUFDLFVBQUMsS0FBSzs0Q0FDcEQsUUFBTyxLQUFLLENBQUMsSUFBSSxFQUFFO2dEQUNmLEtBQUssVUFBVTtvREFDWCxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0RBQzlCLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO29EQUM1QixPQUFPLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO29EQUNqQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7b0RBQ2hCLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztvREFDOUIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7b0RBQzVCLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGlCQUFlLEtBQUssQ0FBQyxVQUFVLGFBQVEsS0FBSyxDQUFDLFlBQVksd0JBQW1CLEtBQUssQ0FBQyxnQkFBZ0IscUJBQWtCLENBQUMsQ0FBQTs2Q0FDako7d0NBQ0wsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTO3FDQUNoQixDQUFDLENBQUM7b0NBQ0gscUJBQU0sTUFBTSxDQUFDLEtBQUssRUFBRSxFQUFBOztvQ0FBcEIsU0FBb0IsQ0FBQzs7Ozs7MEJBcEJOLEVBQUgsV0FBRzs7O3lCQUFILENBQUEsaUJBQUcsQ0FBQTtvQkFBVCxFQUFFO2tEQUFGLEVBQUU7Ozs7O29CQUFJLElBQUcsQ0FBQTs7O29CQXNCbkIsSUFBRyxNQUFNLEtBQUssc0JBQXNCLEVBQUU7d0JBQ2xDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGNBQVcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLFNBQVMsYUFBUyxDQUFDLENBQUM7cUJBQ3BFOzs7OztDQUNKO0FBRUQsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBSyxDQUFBLENBQUMsVUFBQyxNQUFNO0lBQ3BDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDMUIsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcm9taXNlcyBhcyBmcywgY29uc3RhbnRzIGFzIGZzQ29uc3RhbnRzIH0gZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBWYWxncmluZExvZ1BhcnNlciBmcm9tICcuL1ZhbGdyaW5kTG9nUGFyc2VyJztcbmltcG9ydCBBcmd1bWVudHNQcm9jZXNzb3IgZnJvbSAnLi9Bcmd1bWVudHNQcm9jZXNzb3InO1xuXG5jb25zdCBTVERPVVRfRklMRV9ERVNDUklQVE9SID0gMTtcbmNvbnN0IFNURElOX0ZJTEVfREVTQ1JJUFRPUiA9IDA7XG5cbmFzeW5jIGZ1bmN0aW9uIHJ1bihhcmd2OiBzdHJpbmdbXSkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBuZXcgQXJndW1lbnRzUHJvY2Vzc29yKGFyZ3YpLmdldE9wdGlvbnMoKTtcbiAgICBpZighb3B0aW9ucykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBvdXRwdXQ6IG51bWJlcjtcbiAgICBpZighb3B0aW9ucy5vdXRwdXQpIHtcbiAgICAgICAgb3V0cHV0ID0gU1RET1VUX0ZJTEVfREVTQ1JJUFRPUjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB7ZmR9ID0gYXdhaXQgZnMub3BlbihwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgb3B0aW9ucy5vdXRwdXQpLCBmc0NvbnN0YW50cy5XX09LIHwgZnNDb25zdGFudHMuT19DUkVBVCk7XG4gICAgICAgIG91dHB1dCA9IGZkO1xuICAgIH1cbiAgICBjb25zdCBmZHMgPSBuZXcgQXJyYXk8bnVtYmVyPigpO1xuICAgIGNvbnN0IGZpbGVzID0gbmV3IEFycmF5PHN0cmluZz4oKTtcbiAgICBpZighb3B0aW9ucy5maWxlcy5sZW5ndGgpIHtcbiAgICAgICAgZmRzLnB1c2goU1RESU5fRklMRV9ERVNDUklQVE9SKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IoY29uc3QgZmlsZSBvZiBvcHRpb25zLmZpbGVzKSB7XG4gICAgICAgICAgICBjb25zdCBmdWxsUGF0aCA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBmaWxlKTtcbiAgICAgICAgICAgIGNvbnN0IHtmZH0gPSBhd2FpdCBmcy5vcGVuKGZ1bGxQYXRoLCBmc0NvbnN0YW50cy5SX09LKTtcbiAgICAgICAgICAgIGZkcy5wdXNoKGZkKTtcbiAgICAgICAgICAgIGZpbGVzW2ZkXSA9IGZ1bGxQYXRoO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByaW50SGVhZGVyKGZkOiBudW1iZXIpIHtcbiAgICAgICAgaWYob3V0cHV0ICE9PSBTVERPVVRfRklMRV9ERVNDUklQVE9SKSB7XG4gICAgICAgICAgICBwcm9jZXNzLnN0ZG91dC53cml0ZShgUHJvY2Vzc2luZyAke2ZpbGVzW2ZkXX06XFxuYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICBmb3IoY29uc3QgZmQgb2YgZmRzKSB7XG4gICAgICAgIHByaW50SGVhZGVyKGZkKTtcbiAgICAgICAgY29uc3QgcGFyc2VyID0gbmV3IFZhbGdyaW5kTG9nUGFyc2VyKHtcbiAgICAgICAgICAgIGlucHV0OiBmZCxcbiAgICAgICAgICAgIGluY2x1ZGVIZWFkZXI6IHRydWUsXG4gICAgICAgICAgICBvdXRwdXQsXG4gICAgICAgICAgICBjb21tZW50T25seTogb3B0aW9ucy5jb21tZW50T25seSxcbiAgICAgICAgICAgIGV2ZW50RW1pdHRlcjogb3V0cHV0ICE9PSBTVERPVVRfRklMRV9ERVNDUklQVE9SID8gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgc3dpdGNoKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncmVhZGxpbmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5zdGRvdXQuY3Vyc29yVG8oMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLnN0ZG91dC5jbGVhckxpbmUoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLnN0ZG91dC5jbGVhclNjcmVlbkRvd24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50SGVhZGVyKGZkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3Muc3Rkb3V0LmN1cnNvclRvKDAsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5zdGRvdXQuY2xlYXJMaW5lKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoYExpbmUgbnVtYmVyICR7ZXZlbnQubGluZU51bWJlcn0uLi4gKCR7ZXZlbnQuYnl0ZXNXcml0dGVufSBieXRlcyB3cml0dGVuLCAke2V2ZW50LnN1cHByZXNzaW9uQ291bnR9IHN1cHByZXNzaW9ucylcXG5gKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gOiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IHBhcnNlci5wYXJzZSgpO1xuICAgIH1cbiAgICBpZihvdXRwdXQgIT09IFNURE9VVF9GSUxFX0RFU0NSSVBUT1IpIHtcbiAgICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoYERvbmUgaW4gJHtEYXRlLm5vdygpIC0gc3RhcnRUaW1lfW1zIVxcblxcbmApO1xuICAgIH1cbn1cblxucnVuKHByb2Nlc3MuYXJndi5zbGljZSgyKSkuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IocmVhc29uKTtcbn0pO1xuIl19