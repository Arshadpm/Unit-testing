export interface IValgrindOptions {
    files: string[];
    output?: string;
    commentOnly: boolean;
}
export interface IValgrindLogParserOptions extends Pick<IValgrindOptions, 'commentOnly'> {
    input: number;
    output: number;
    includeHeader?: boolean;
    eventEmitter?: (event: ({
        type: 'readline';
        bytesWritten: number;
        suppressionCount: number;
        lineNumber: number;
    })) => void | Promise<void>;
}
export declare class Character {
    static isEndOfSuppressionLine(ch: number): boolean;
    static isLineBreak(ch: number): boolean;
}
export default class ValgrindLogParser {
    private readonly options;
    suppressionsCount: number;
    bytesWritten: number;
    lineCount: number;
    private static readonly BufferReadingOffsetMax;
    /**
     * 4 spaces
     */
    private readonly indentationBuffer;
    private readonly buffer;
    private eof;
    /**
     * How much did we read from current buffer?
     */
    private bufferReadingOffset;
    private bufferReadingOffsetMax;
    constructor(options: IValgrindLogParserOptions);
    parse(): Promise<void>;
    private characterCache;
    private writeOutput;
    private readSuppression;
    private readSuppressionLine;
    private readValgrindLog;
    private preload;
    private expect;
    private peekCharacter;
    private readCharacter;
    private onAdvanceLineNumber;
    /**
     * Read more from file handle as we need
     */
    private read;
    private readInput;
}
//# sourceMappingURL=ValgrindLogParser.d.ts.map