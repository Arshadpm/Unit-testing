function cov_2mn0mn07f7(){var path="C:\\Users\\arshad.muhammed\\Desktop\\basictest\\Validation.js";var hash="110e837d14909a924d857a4cbb59a9411579fbb2";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\arshad.muhammed\\Desktop\\basictest\\Validation.js",statementMap:{"0":{start:{line:2,column:14},end:{line:2,column:30}},"1":{start:{line:3,column:13},end:{line:3,column:35}},"2":{start:{line:27,column:0},end:{line:169,column:1}},"3":{start:{line:29,column:2},end:{line:29,column:69}},"4":{start:{line:30,column:2},end:{line:30,column:32}},"5":{start:{line:31,column:8},end:{line:31,column:39}},"6":{start:{line:32,column:8},end:{line:32,column:20}},"7":{start:{line:37,column:16},end:{line:37,column:32}},"8":{start:{line:40,column:2},end:{line:107,column:1}},"9":{start:{line:42,column:4},end:{line:42,column:54}},"10":{start:{line:43,column:4},end:{line:43,column:34}},"11":{start:{line:44,column:4},end:{line:44,column:35}},"12":{start:{line:46,column:4},end:{line:46,column:15}},"13":{start:{line:50,column:16},end:{line:50,column:24}},"14":{start:{line:52,column:14},end:{line:52,column:22}},"15":{start:{line:56,column:24},end:{line:56,column:43}},"16":{start:{line:57,column:2},end:{line:64,column:3}},"17":{start:{line:59,column:4},end:{line:59,column:54}},"18":{start:{line:60,column:4},end:{line:60,column:34}},"19":{start:{line:61,column:4},end:{line:61,column:35}},"20":{start:{line:63,column:4},end:{line:63,column:15}},"21":{start:{line:67,column:22},end:{line:67,column:39}},"22":{start:{line:70,column:2},end:{line:77,column:3}},"23":{start:{line:72,column:4},end:{line:72,column:54}},"24":{start:{line:73,column:4},end:{line:73,column:34}},"25":{start:{line:74,column:5},end:{line:74,column:36}},"26":{start:{line:76,column:4},end:{line:76,column:15}},"27":{start:{line:80,column:21},end:{line:80,column:35}},"28":{start:{line:81,column:25},end:{line:81,column:60}},"29":{start:{line:84,column:26},end:{line:84,column:42}},"30":{start:{line:85,column:2},end:{line:93,column:3}},"31":{start:{line:87,column:4},end:{line:87,column:54}},"32":{start:{line:88,column:4},end:{line:88,column:34}},"33":{start:{line:89,column:4},end:{line:89,column:35}},"34":{start:{line:92,column:4},end:{line:92,column:15}},"35":{start:{line:96,column:30},end:{line:96,column:47}},"36":{start:{line:97,column:2},end:{line:105,column:3}},"37":{start:{line:99,column:4},end:{line:99,column:54}},"38":{start:{line:100,column:4},end:{line:100,column:34}},"39":{start:{line:101,column:4},end:{line:101,column:35}},"40":{start:{line:104,column:4},end:{line:104,column:15}},"41":{start:{line:163,column:0},end:{line:163,column:29}},"42":{start:{line:164,column:0},end:{line:164,column:30}},"43":{start:{line:166,column:0},end:{line:166,column:235}},"44":{start:{line:168,column:0},end:{line:168,column:11}}},fnMap:{"0":{name:"isValidEmail",decl:{start:{line:24,column:16},end:{line:24,column:28}},loc:{start:{line:24,column:36},end:{line:170,column:1}},line:24}},branchMap:{"0":{loc:{start:{line:27,column:0},end:{line:169,column:1}},type:"if",locations:[{start:{line:27,column:0},end:{line:169,column:1}},{start:{line:27,column:0},end:{line:169,column:1}}],line:27},"1":{loc:{start:{line:40,column:2},end:{line:107,column:1}},type:"if",locations:[{start:{line:40,column:2},end:{line:107,column:1}},{start:{line:40,column:2},end:{line:107,column:1}}],line:40},"2":{loc:{start:{line:57,column:2},end:{line:64,column:3}},type:"if",locations:[{start:{line:57,column:2},end:{line:64,column:3}},{start:{line:57,column:2},end:{line:64,column:3}}],line:57},"3":{loc:{start:{line:70,column:2},end:{line:77,column:3}},type:"if",locations:[{start:{line:70,column:2},end:{line:77,column:3}},{start:{line:70,column:2},end:{line:77,column:3}}],line:70},"4":{loc:{start:{line:85,column:2},end:{line:93,column:3}},type:"if",locations:[{start:{line:85,column:2},end:{line:93,column:3}},{start:{line:85,column:2},end:{line:93,column:3}}],line:85},"5":{loc:{start:{line:97,column:2},end:{line:105,column:3}},type:"if",locations:[{start:{line:97,column:2},end:{line:105,column:3}},{start:{line:97,column:2},end:{line:105,column:3}}],line:97}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0},f:{"0":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"110e837d14909a924d857a4cbb59a9411579fbb2"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2mn0mn07f7=function(){return actualCoverage;};}return actualCoverage;}cov_2mn0mn07f7();const chalk=(cov_2mn0mn07f7().s[0]++,require('chalk'));//to make colorful text
const errorc=(cov_2mn0mn07f7().s[1]++,require('./Errorcode'));// exports.isValidEmail = function (email) {
//     console.log(chalk.gray.italic("\nentering into validate function() ......\n")); 
//     const emailRegex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
//     var isvalid= emailRegex.test(String(email).toLowerCase());
//     if (isvalid) {
//       console.log(chalk.bold.green("Email is valid: " + email));
//   } else {
//       console.log(chalk.bold.red("Email is invalid: " + email));
//       // console.log("Invalid Email format");
//       errorc.printErrorMessage(1000); // Output: Error: invalid input format
//   }
//   console.log(chalk.gray.italic("\nreturning value from validate function() ......\n"));
//   return isvalid;
//   }
export function isValidEmail(email){cov_2mn0mn07f7().f[0]++;cov_2mn0mn07f7().s[2]++;//   // Split the email address on the "@" character
if(email===""){cov_2mn0mn07f7().b[0][0]++;cov_2mn0mn07f7().s[3]++;console.log('\u001b[0m'+'validateEmail: Status for '+email,'is: ');cov_2mn0mn07f7().s[4]++;console.log("Status is 1001");cov_2mn0mn07f7().s[5]++;errorc.printErrorMessage(1001);cov_2mn0mn07f7().s[6]++;return 1001;}else{cov_2mn0mn07f7().b[0][1]++;const parts=(cov_2mn0mn07f7().s[7]++,email.split("@"));// Check if there are exactly 2 parts
cov_2mn0mn07f7().s[8]++;if(parts.length!==2){cov_2mn0mn07f7().b[1][0]++;cov_2mn0mn07f7().s[9]++;// errorc.console.log(chalk.red(1002));
console.log(chalk.red("\nInValid email address"));cov_2mn0mn07f7().s[10]++;console.log("Status is 1002");cov_2mn0mn07f7().s[11]++;errorc.printErrorMessage(1002);//  console.log(chalk.red("Invalid email address"));
cov_2mn0mn07f7().s[12]++;return 204;}else{cov_2mn0mn07f7().b[1][1]++;// Get the username and domain parts
var username=(cov_2mn0mn07f7().s[13]++,parts[0]);var domain=(cov_2mn0mn07f7().s[14]++,parts[1]);// Check if the username part contains only valid characters
const usernameRegex=(cov_2mn0mn07f7().s[15]++,/^[a-zA-Z0-9.+-]+$/);cov_2mn0mn07f7().s[16]++;if(!usernameRegex.test(username)){cov_2mn0mn07f7().b[2][0]++;cov_2mn0mn07f7().s[17]++;// console.log(chalk.red(1003));
console.log(chalk.red("\nInValid email address"));cov_2mn0mn07f7().s[18]++;console.log("Status is 1003");cov_2mn0mn07f7().s[19]++;errorc.printErrorMessage(1003);// console.log(chalk.red("Invalid email address"));
cov_2mn0mn07f7().s[20]++;return 204;}else{cov_2mn0mn07f7().b[2][1]++;}// Split the domain part on the "." character
const domainParts=(cov_2mn0mn07f7().s[21]++,domain.split("."));// Check if there are at least 2 parts
cov_2mn0mn07f7().s[22]++;if(domainParts.length<2){cov_2mn0mn07f7().b[3][0]++;cov_2mn0mn07f7().s[23]++;//  console.log(chalk.red(1004));
console.log(chalk.red("\nInValid email address"));cov_2mn0mn07f7().s[24]++;console.log("Status is 1004");cov_2mn0mn07f7().s[25]++;errorc.printErrorMessage(1004);// console.log(chalk.red("Invalid email address"));
cov_2mn0mn07f7().s[26]++;return 204;}else{cov_2mn0mn07f7().b[3][1]++;}// Get the domain name and top-level domain
const domainName=(cov_2mn0mn07f7().s[27]++,domainParts[0]);const topLevelDomain=(cov_2mn0mn07f7().s[28]++,domainParts[domainParts.length-1]);// Check if the domain name contains only letters and numbers
const domainNameRegex=(cov_2mn0mn07f7().s[29]++,/^[a-zA-Z0-9]+$/);cov_2mn0mn07f7().s[30]++;if(!domainNameRegex.test(domainName)){cov_2mn0mn07f7().b[4][0]++;cov_2mn0mn07f7().s[31]++;// console.log(chalk.red(1005));
console.log(chalk.red("\nInValid email address"));cov_2mn0mn07f7().s[32]++;console.log("Status is 1005");cov_2mn0mn07f7().s[33]++;errorc.printErrorMessage(1005);// console.log(chalk.red("Invalid email address"));
cov_2mn0mn07f7().s[34]++;return 204;}else{cov_2mn0mn07f7().b[4][1]++;}// Check if the top-level domain consists of 2-6 letters
const topLevelDomainRegex=(cov_2mn0mn07f7().s[35]++,/^[a-zA-Z]{2,6}$/);cov_2mn0mn07f7().s[36]++;if(!topLevelDomainRegex.test(topLevelDomain)){cov_2mn0mn07f7().b[5][0]++;cov_2mn0mn07f7().s[37]++;// console.log(chalk.red(1006));
console.log(chalk.red("\nInValid email address"));cov_2mn0mn07f7().s[38]++;console.log("Status is 1006");cov_2mn0mn07f7().s[39]++;errorc.printErrorMessage(1006);// console.log(chalk.red("Invalid email address"));
cov_2mn0mn07f7().s[40]++;return 204;}else{cov_2mn0mn07f7().b[5][1]++;}}// Split the email address into two parts
//  const parts = email.split("@");
//  console.log("hi",parts);
//  const local=parts[0];
//  const domain=parts[1];
//  console.log("hii",local);
//  console.log("hii",domain);
//  const len=domain.length;
//  // Check the local part
//  if (local.length === 0) return "Local part is empty";
//  if (local.length > 64) return "Local part is too long (maximum is 64 characters)";
//  if (!/^[a-zA-Z0-9!#$%&'*+/=?^_`{|}~.-]+$/.test(local)) return "Local part contains invalid characters";
//  if (local[0] === "." || local[local.length - 1] === ".") return "Local part starts or ends with a dot";
//  if (local.indexOf("..") !== -1) return "Local part contains two dots consecutively";
//  // Check the domain part
// //  if (domain.length === 0) return "Domain part is empty";
//  if (typeof domain !== "undefined" && len === 0) 
//  {
//   return "Domain part is empty";
//  }
//  if (len > 255) 
//  {
//   return "Domain part is too long (maximum is 255 characters)";
//  }
//  const domainParts = domain.split(".");
//  console.log(domainParts);
//  for (const part of domainParts) 
//  {
//    if (part.length === 0)
//     {
//       return "Domain part contains an empty label";
//     }
//    if (part.length > 63)
//    {
//      return "A label in the domain part is too long (maximum is 63 characters)";
//    }
//    if (part[0] === "-" || part[part.length - 1] === "-") 
//    {
//     return "A label in the domain part starts or ends with a hyphen";
//    }
//  }
//  // Check the TLD
//  const tld = domainParts[domainParts.length - 1];
//  if (!/^[a-z]+$/.test(tld)) return "TLD contains invalid characters";
//  return true;
cov_2mn0mn07f7().s[41]++;console.log("Status is 200");cov_2mn0mn07f7().s[42]++;errorc.printErrorMessage(200);cov_2mn0mn07f7().s[43]++;console.log(chalk.cyan("\nReason:\nThe prefix appears to the left of the @ symbol\nThe domain appears to the right of the @ symbol\nProper syntax: \nThe email address have the correct format, including an @ symbol and a domain name"));cov_2mn0mn07f7().s[44]++;return 200;}}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,